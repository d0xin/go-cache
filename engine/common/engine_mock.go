package common

import "time"

// AUTOGENERATED BY MOQ
// github.com/matryer/moq

// EngineMock is a mock implementation of Engine.
//
//     func TestSomethingThatUsesEngine(t *testing.T) {
//
//         // make and configure a mocked Engine
//         mockedEngine := &EngineMock{
//             ExistsFunc: func(in1 string) bool {
// 	               panic("TODO: mock out the Exists function")
//             },
//             ExpireFunc: func(in1 string) error {
// 	               panic("TODO: mock out the Expire function")
//             },
//             GetFunc: func(in1 string) ([]byte, error) {
// 	               panic("TODO: mock out the Get function")
//             },
//             IsExpiredFunc: func(in1 string) bool {
// 	               panic("TODO: mock out the IsExpired function")
//             },
//             IsLockedFunc: func(in1 string) bool {
// 	               panic("TODO: mock out the IsLocked function")
//             },
//             LockFunc: func(in1 string) error {
// 	               panic("TODO: mock out the Lock function")
//             },
//             PutFunc: func(in1 string, in2 []byte, in3 time.Time) error {
// 	               panic("TODO: mock out the Put function")
//             },
//             UnlockFunc: func(in1 string) error {
// 	               panic("TODO: mock out the Unlock function")
//             },
//         }
//
//         // TODO: use mockedEngine in code that requires Engine
//
//     }
type EngineMock struct {
	// ExistsFunc mocks the Exists function.
	ExistsFunc func(in1 string) bool
	// ExpireFunc mocks the Expire function.
	ExpireFunc func(in1 string) error
	// GetFunc mocks the Get function.
	GetFunc func(in1 string) ([]byte, error)
	// IsExpiredFunc mocks the IsExpired function.
	IsExpiredFunc func(in1 string) bool
	// IsLockedFunc mocks the IsLocked function.
	IsLockedFunc func(in1 string) bool
	// LockFunc mocks the Lock function.
	LockFunc func(in1 string) error
	// PutFunc mocks the Put function.
	PutFunc func(in1 string, in2 []byte, in3 time.Time) error
	// UnlockFunc mocks the Unlock function.
	UnlockFunc func(in1 string) error
}

// Exists calls ExistsFunc.
func (mock *EngineMock) Exists(in1 string) bool {
	if mock.ExistsFunc == nil {
		panic("moq: EngineMock.ExistsFunc is nil but was just called")
	}
	return mock.ExistsFunc(in1)
}

// Expire calls ExpireFunc.
func (mock *EngineMock) Expire(in1 string) error {
	if mock.ExpireFunc == nil {
		panic("moq: EngineMock.ExpireFunc is nil but was just called")
	}
	return mock.ExpireFunc(in1)
}

// Get calls GetFunc.
func (mock *EngineMock) Get(in1 string) ([]byte, error) {
	if mock.GetFunc == nil {
		panic("moq: EngineMock.GetFunc is nil but was just called")
	}
	return mock.GetFunc(in1)
}

// IsExpired calls IsExpiredFunc.
func (mock *EngineMock) IsExpired(in1 string) bool {
	if mock.IsExpiredFunc == nil {
		panic("moq: EngineMock.IsExpiredFunc is nil but was just called")
	}
	return mock.IsExpiredFunc(in1)
}

// IsLocked calls IsLockedFunc.
func (mock *EngineMock) IsLocked(in1 string) bool {
	if mock.IsLockedFunc == nil {
		panic("moq: EngineMock.IsLockedFunc is nil but was just called")
	}
	return mock.IsLockedFunc(in1)
}

// Lock calls LockFunc.
func (mock *EngineMock) Lock(in1 string) error {
	if mock.LockFunc == nil {
		panic("moq: EngineMock.LockFunc is nil but was just called")
	}
	return mock.LockFunc(in1)
}

// Put calls PutFunc.
func (mock *EngineMock) Put(in1 string, in2 []byte, in3 time.Time) error {
	if mock.PutFunc == nil {
		panic("moq: EngineMock.PutFunc is nil but was just called")
	}
	return mock.PutFunc(in1, in2, in3)
}

// Unlock calls UnlockFunc.
func (mock *EngineMock) Unlock(in1 string) error {
	if mock.UnlockFunc == nil {
		panic("moq: EngineMock.UnlockFunc is nil but was just called")
	}
	return mock.UnlockFunc(in1)
}
