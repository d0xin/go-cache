package regencacher

import "time"

// AUTOGENERATED BY MOQ
// github.com/matryer/moq

// CacherMock is a mock implementation of Cacher.
//
//     func TestSomethingThatUsesCacher(t *testing.T) {
//
//         // make and configure a mocked Cacher
//         mockedCacher := &CacherMock{
//             ExpireFunc: func(in1 string) error {
// 	               panic("TODO: mock out the Expire function")
//             },
//             GetFunc: func(in1 string, in2 time.Time, in3 func() ([]byte, error)) func() ([]byte, error) {
// 	               panic("TODO: mock out the Get function")
//             },
//         }
//
//         // TODO: use mockedCacher in code that requires Cacher
//
//     }
type CacherMock struct {
	// ExpireFunc mocks the Expire function.
	ExpireFunc func(in1 string) error
	// GetFunc mocks the Get function.
	GetFunc func(in1 string, in2 time.Time, in3 func() ([]byte, error)) func() ([]byte, error)
}

// Expire calls ExpireFunc.
func (mock *CacherMock) Expire(in1 string) error {
	if mock.ExpireFunc == nil {
		panic("moq: CacherMock.ExpireFunc is nil but was just called")
	}
	return mock.ExpireFunc(in1)
}

// Get calls GetFunc.
func (mock *CacherMock) Get(in1 string, in2 time.Time, in3 func() ([]byte, error)) func() ([]byte, error) {
	if mock.GetFunc == nil {
		panic("moq: CacherMock.GetFunc is nil but was just called")
	}
	return mock.GetFunc(in1, in2, in3)
}
